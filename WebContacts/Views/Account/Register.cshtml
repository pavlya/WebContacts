@using WebContacts.Models
@model RegistrationModel
@{
    ViewBag.Title = "Register";
}
<h2>Register</h2>
<div>
@using (Html.BeginForm())
{
    <p>@Html.ValidationSummary(true)</p>
    {
        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Password, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    <div id="passValidation" name="passValidation" class="default">
                    </div>
                </div>
                
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ConfirmPassword, new {@class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ConfirmEmail, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.ConfirmEmail, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ConfirmEmail, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Complete Registration" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
}
<script>

    $(".password").keyup(passStrengthChecker);

    var passField = $(".password");
    var passValidation = $("#passValidation");
    var currentClass = passValidation.attr('class');
    var mingLength = 8;
    var inputLength = 0;
    var complexityLevel = 0;
    var str = "";
    var strongPasswordLength = 20;

    function passStrengthChecker() {
        checkPassword();
        printResult();
    }

    // check if password contains character, number, upper case or lowercase letter or long password
    // in case and one of the requirments is accomplished increment complexity by 1
    function checkPassword() {
        complexityLevel = 0;
        str = "";
        str = passField.val();
        inputLength = str.length;
        if (containsLowerCase(str))
            complexityLevel++;
        if (containsUpperCase(str))
            complexityLevel++;
        if (containsNumbers(str))
            complexityLevel++;
        if (containsCharacters(str))
            complexityLevel++;
        if (str.length > strongPasswordLength)
            complexityLevel++;
    }

    function printResult() {
        if (passField.val() == "") {
            currentClass = passValidation.attr('class');
            passValidation.text("");
            passValidation.removeClass(currentClass).addClass("default");
        }
        else if (inputLength < mingLength) {
            currentClass = passValidation.attr('class');
            passValidation.text("At least " + mingLength + " characters please!").removeClass(currentClass).addClass("weak");
        }
        else if (inputLength >= 8) {
            switch (complexityLevel) {
                case 1:
                    currentClass = passValidation.attr('class');
                    passValidation.text("Weak").removeClass(currentClass).addClass("weak");
                    break;
                case 2:
                    currentClass = passValidation.attr('class');
                    passValidation.text("Medium").removeClass(currentClass).addClass("medium");
                    break;
                case 3:
                    currentClass = passValidation.attr('class');
                    passValidation.text("Secure!").removeClass(currentClass).addClass("strong");
                    break;
                case 4:
                    currentClass = passValidation.attr('class');
                    passValidation.text("Very secure!").removeClass(currentClass).addClass("strongest");
                    break;
                case 5:
                    currentClass = passValidation.attr('class');
                    passValidation.text("Very secure!").removeClass(currentClass).addClass("strongest");
                    break;
                default:
                    break;
            }
            //currentClass = passValidation.attr('class');
            //passValidation.text("Secure!").removeClass(currentClass).addClass("strong");
        }  
    }

    function containsLowerCase(text) {
        for (x = 0; x < text.length; x++)
            if (text.charAt(x) >= 'a' && text.charAt(x) <= 'z')
                return true;
        return false;
    }

    function containsUpperCase(text) {
        for (x = 0; x < text.length; x++)
            if (text.charAt(x) >= 'A' && text.charAt(x) <= 'Z')
                return true;
        return false;
    }

    function containsNumbers(text) {
        var parsedArray = text.split('');
        for (i = 0; i < parsedArray.length; i++) {
            if (parsedArray[i] > -1) {
                return true;
            }
        }
        return false;
    }

    function containsCharacters(text) {
        // using double @@ for razor engine
        var specialChars = "<>@@!#$%^&*()_+[]{}?:;|'\"\\,./~`-=";
        for (i = 0; i < specialChars.length; i++) {
            if (text.indexOf(specialChars[i]) > -1) {
                return true
            }
        }
        return false;
    }
</script>
</div>

